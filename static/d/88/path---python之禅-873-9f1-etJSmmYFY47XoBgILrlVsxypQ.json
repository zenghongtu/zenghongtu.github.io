{"data":{"post":{"id":"d08831f1-4e8e-507c-9e2d-064d0185723e","html":"<p>title: python之禅\nauthor: Tim Peters\ntags:</p>\n<ul>\n<li>python\ncategories:</li>\n<li>\n<p>python\ndate: 2017-03-04 20:08:00</p>\n<hr>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Beautiful <span class=\"token keyword\">is</span> better than ugly<span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 优美胜于丑陋（Python以编写优美的代码为目标）</span>\nExplicit <span class=\"token keyword\">is</span> better than implicit<span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似） </span>\nSimple <span class=\"token keyword\">is</span> better than <span class=\"token builtin\">complex</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现） </span>\nComplex <span class=\"token keyword\">is</span> better than complicated<span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</span>\nFlat <span class=\"token keyword\">is</span> better than nested<span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套） </span>\nSparse <span class=\"token keyword\">is</span> better than dense<span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题） </span>\nReadability counts<span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 可读性很重要（优美的代码是可读的） </span>\nSpecial cases aren't special enough to <span class=\"token keyword\">break</span> the rules<span class=\"token punctuation\">.</span>\nAlthough practicality beats purity<span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上） </span>\nErrors should never <span class=\"token keyword\">pass</span> silently<span class=\"token punctuation\">.</span>\nUnless explicitly silenced<span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写except:pass风格的代码） </span>\nIn the face of ambiguity<span class=\"token punctuation\">,</span> refuse the temptation to guess<span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 当存在多种可能，不要尝试去猜测 </span>\nThere should be one<span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token operator\">and</span> preferably only one <span class=\"token operator\">-</span><span class=\"token operator\">-</span>obvious way to do it<span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法） </span>\nAlthough that way may <span class=\"token operator\">not</span> be obvious at first unless you're Dutch<span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 虽然这并不容易，因为你不是 Python 之父（这里的Dutch是指Guido）</span>\nNow <span class=\"token keyword\">is</span> better than never<span class=\"token punctuation\">.</span>\nAlthough never <span class=\"token keyword\">is</span> often better than <span class=\"token operator\">*</span>right<span class=\"token operator\">*</span> now<span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）</span>\nIf the implementation <span class=\"token keyword\">is</span> hard to explain<span class=\"token punctuation\">,</span> it's a bad idea<span class=\"token punctuation\">.</span>\nIf the implementation <span class=\"token keyword\">is</span> easy to explain<span class=\"token punctuation\">,</span> it may be a good idea<span class=\"token punctuation\">.</span>\n<span class=\"token comment\"># 如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准） </span>\nNamespaces are one honking great idea <span class=\"token operator\">-</span><span class=\"token operator\">-</span> let's do more of those!\n<span class=\"token comment\"># 命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</span></code></pre></div>","fields":{"slug":"/python之禅/","prefix":null},"frontmatter":{"title":"","author":null,"category":null,"cover":null}},"authornote":{"id":"f3ffdeef-a16f-507d-9f2f-98fa5e045d0b","html":"<p><strong>Mr. Gatsby</strong> Proin ornare ligula eu tellus tempus elementum. Aenean <a href=\"/\">bibendum</a> iaculis mi, nec blandit lacus interdum vitae. Vestibulum non nibh risus, a scelerisque purus. Blandit lacus interdum vitae. Vestibulum non nibh risus, a scelerisque purus.</p>"},"site":{"siteMetadata":{"facebook":{"appId":""}}}},"pageContext":{"slug":"/python之禅/","prev":{"id":"ce3ae192-ec81-5fb0-a979-9f75f6d208c5","fields":{"slug":"/python反爬虫归纳/","prefix":null,"source":"posts"},"frontmatter":{"title":"","category":null}},"next":{"id":"6ff48c06-18bc-5498-a6cb-0789c958c929","fields":{"slug":"/PIL生成验证码/","prefix":null,"source":"posts"},"frontmatter":{"title":"","category":null}},"source":"posts"}}